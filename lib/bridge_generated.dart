// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.54.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class Native {
  Future<void> init(
      {required String root, required String downloadsTo, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitConstMeta;

  Future<void> setProxy({required String url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetProxyConstMeta;

  Future<String> desktopRoot({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDesktopRootConstMeta;

  Future<String> httpGet({required String url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHttpGetConstMeta;

  Future<void> saveProperty(
      {required String k, required String v, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSavePropertyConstMeta;

  Future<String> loadProperty({required String k, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoadPropertyConstMeta;

  Future<TagData> tagSummary({required String host, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTagSummaryConstMeta;

  Future<PostPage> loadPosts(
      {required String host,
      required String tags,
      required int page,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoadPostsConstMeta;

  Future<LocalImage> loadCacheImage(
      {required String url,
      required String useful,
      int? extendsFieldIntFirst,
      int? extendsFieldIntSecond,
      int? extendsFieldIntThird,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoadCacheImageConstMeta;

  Future<void> autoClean({required int time, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAutoCleanConstMeta;

  Future<void> cleanAllCache({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCleanAllCacheConstMeta;

  Future<bool> addDownloadPost(
      {required String host, required Post post, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddDownloadPostConstMeta;

  Future<List<DlPost>> allDownloads({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAllDownloadsConstMeta;

  Future<String> loadDlImage({required String dlKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoadDlImageConstMeta;

  Future<void> copyImageTo(
      {required String srcPath, required String toDir, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCopyImageToConstMeta;

  Future<void> resetFailedDownloads({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResetFailedDownloadsConstMeta;

  Future<void> deleteDlPost({required String dlKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteDlPostConstMeta;

  Future<String> downloadsTo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDownloadsToConstMeta;
}

class DlPost {
  final String host;
  final int id;
  final String tags;
  final int createdAt;
  final int? creatorId;
  final String author;
  final int change;
  final String source;
  final int score;
  final String md5;
  final int fileSize;
  final String fileUrl;
  final bool isShownInIndex;
  final String previewUrl;
  final int previewWidth;
  final int previewHeight;
  final int actualPreviewWidth;
  final int actualPreviewHeight;
  final String sampleUrl;
  final int sampleWidth;
  final int sampleHeight;
  final int sampleFileSize;
  final String jpegUrl;
  final int jpegWidth;
  final int jpegHeight;
  final int jpegFileSize;
  final String rating;
  final bool hasChildren;
  final int? parentId;
  final int width;
  final int height;
  final String status;
  final bool isHeld;
  final String framesPendingString;
  final String framesString;
  final String dlKey;
  final int dlCreatedTime;
  final int dlStatus;
  final String fileFormat;

  DlPost({
    required this.host,
    required this.id,
    required this.tags,
    required this.createdAt,
    this.creatorId,
    required this.author,
    required this.change,
    required this.source,
    required this.score,
    required this.md5,
    required this.fileSize,
    required this.fileUrl,
    required this.isShownInIndex,
    required this.previewUrl,
    required this.previewWidth,
    required this.previewHeight,
    required this.actualPreviewWidth,
    required this.actualPreviewHeight,
    required this.sampleUrl,
    required this.sampleWidth,
    required this.sampleHeight,
    required this.sampleFileSize,
    required this.jpegUrl,
    required this.jpegWidth,
    required this.jpegHeight,
    required this.jpegFileSize,
    required this.rating,
    required this.hasChildren,
    this.parentId,
    required this.width,
    required this.height,
    required this.status,
    required this.isHeld,
    required this.framesPendingString,
    required this.framesString,
    required this.dlKey,
    required this.dlCreatedTime,
    required this.dlStatus,
    required this.fileFormat,
  });
}

class LocalImage {
  final String absPath;
  final String localPath;
  final String imageFormat;
  final int imageWidth;
  final int imageHeight;

  LocalImage({
    required this.absPath,
    required this.localPath,
    required this.imageFormat,
    required this.imageWidth,
    required this.imageHeight,
  });
}

class Post {
  final int id;
  final String tags;
  final int createdAt;
  final int? creatorId;
  final String author;
  final int change;
  final String source;
  final int score;
  final String md5;
  final int fileSize;
  final String fileUrl;
  final bool isShownInIndex;
  final String previewUrl;
  final int previewWidth;
  final int previewHeight;
  final int actualPreviewWidth;
  final int actualPreviewHeight;
  final String sampleUrl;
  final int sampleWidth;
  final int sampleHeight;
  final int sampleFileSize;
  final String jpegUrl;
  final int jpegWidth;
  final int jpegHeight;
  final int jpegFileSize;
  final String rating;
  final bool hasChildren;
  final int? parentId;
  final String status;
  final int width;
  final int height;
  final bool isHeld;
  final String framesPendingString;
  final String framesString;

  Post({
    required this.id,
    required this.tags,
    required this.createdAt,
    this.creatorId,
    required this.author,
    required this.change,
    required this.source,
    required this.score,
    required this.md5,
    required this.fileSize,
    required this.fileUrl,
    required this.isShownInIndex,
    required this.previewUrl,
    required this.previewWidth,
    required this.previewHeight,
    required this.actualPreviewWidth,
    required this.actualPreviewHeight,
    required this.sampleUrl,
    required this.sampleWidth,
    required this.sampleHeight,
    required this.sampleFileSize,
    required this.jpegUrl,
    required this.jpegWidth,
    required this.jpegHeight,
    required this.jpegFileSize,
    required this.rating,
    required this.hasChildren,
    this.parentId,
    required this.status,
    required this.width,
    required this.height,
    required this.isHeld,
    required this.framesPendingString,
    required this.framesString,
  });
}

class PostPage {
  final List<Post> posts;
  final int pageTotal;

  PostPage({
    required this.posts,
    required this.pageTotal,
  });
}

class Tag {
  final int imageTotal;
  final List<String> tagNames;

  Tag({
    required this.imageTotal,
    required this.tagNames,
  });
}

class TagData {
  final int version;
  final List<Tag> tags;

  TagData({
    required this.version,
    required this.tags,
  });
}

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<void> init(
      {required String root, required String downloadsTo, dynamic hint}) {
    var arg0 = _platform.api2wire_String(root);
    var arg1 = _platform.api2wire_String(downloadsTo);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitConstMeta,
      argValues: [root, downloadsTo],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init",
        argNames: ["root", "downloadsTo"],
      );

  Future<void> setProxy({required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_proxy(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetProxyConstMeta,
      argValues: [url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetProxyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_proxy",
        argNames: ["url"],
      );

  Future<String> desktopRoot({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_desktop_root(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kDesktopRootConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDesktopRootConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "desktop_root",
        argNames: [],
      );

  Future<String> httpGet({required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_http_get(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kHttpGetConstMeta,
      argValues: [url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHttpGetConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "http_get",
        argNames: ["url"],
      );

  Future<void> saveProperty(
      {required String k, required String v, dynamic hint}) {
    var arg0 = _platform.api2wire_String(k);
    var arg1 = _platform.api2wire_String(v);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_save_property(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSavePropertyConstMeta,
      argValues: [k, v],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSavePropertyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "save_property",
        argNames: ["k", "v"],
      );

  Future<String> loadProperty({required String k, dynamic hint}) {
    var arg0 = _platform.api2wire_String(k);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_load_property(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kLoadPropertyConstMeta,
      argValues: [k],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoadPropertyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "load_property",
        argNames: ["k"],
      );

  Future<TagData> tagSummary({required String host, dynamic hint}) {
    var arg0 = _platform.api2wire_String(host);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_tag_summary(port_, arg0),
      parseSuccessData: _wire2api_tag_data,
      constMeta: kTagSummaryConstMeta,
      argValues: [host],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTagSummaryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tag_summary",
        argNames: ["host"],
      );

  Future<PostPage> loadPosts(
      {required String host,
      required String tags,
      required int page,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(host);
    var arg1 = _platform.api2wire_String(tags);
    var arg2 = _platform.api2wire_i64(page);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_load_posts(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_post_page,
      constMeta: kLoadPostsConstMeta,
      argValues: [host, tags, page],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoadPostsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "load_posts",
        argNames: ["host", "tags", "page"],
      );

  Future<LocalImage> loadCacheImage(
      {required String url,
      required String useful,
      int? extendsFieldIntFirst,
      int? extendsFieldIntSecond,
      int? extendsFieldIntThird,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    var arg1 = _platform.api2wire_String(useful);
    var arg2 = _platform.api2wire_opt_box_autoadd_i32(extendsFieldIntFirst);
    var arg3 = _platform.api2wire_opt_box_autoadd_i32(extendsFieldIntSecond);
    var arg4 = _platform.api2wire_opt_box_autoadd_i32(extendsFieldIntThird);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_load_cache_image(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_local_image,
      constMeta: kLoadCacheImageConstMeta,
      argValues: [
        url,
        useful,
        extendsFieldIntFirst,
        extendsFieldIntSecond,
        extendsFieldIntThird
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoadCacheImageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "load_cache_image",
        argNames: [
          "url",
          "useful",
          "extendsFieldIntFirst",
          "extendsFieldIntSecond",
          "extendsFieldIntThird"
        ],
      );

  Future<void> autoClean({required int time, dynamic hint}) {
    var arg0 = _platform.api2wire_i64(time);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_auto_clean(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kAutoCleanConstMeta,
      argValues: [time],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAutoCleanConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "auto_clean",
        argNames: ["time"],
      );

  Future<void> cleanAllCache({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_clean_all_cache(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kCleanAllCacheConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCleanAllCacheConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "clean_all_cache",
        argNames: [],
      );

  Future<bool> addDownloadPost(
      {required String host, required Post post, dynamic hint}) {
    var arg0 = _platform.api2wire_String(host);
    var arg1 = _platform.api2wire_box_autoadd_post(post);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_add_download_post(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kAddDownloadPostConstMeta,
      argValues: [host, post],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddDownloadPostConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_download_post",
        argNames: ["host", "post"],
      );

  Future<List<DlPost>> allDownloads({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_all_downloads(port_),
      parseSuccessData: _wire2api_list_dl_post,
      constMeta: kAllDownloadsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAllDownloadsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "all_downloads",
        argNames: [],
      );

  Future<String> loadDlImage({required String dlKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(dlKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_load_dl_image(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kLoadDlImageConstMeta,
      argValues: [dlKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoadDlImageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "load_dl_image",
        argNames: ["dlKey"],
      );

  Future<void> copyImageTo(
      {required String srcPath, required String toDir, dynamic hint}) {
    var arg0 = _platform.api2wire_String(srcPath);
    var arg1 = _platform.api2wire_String(toDir);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_copy_image_to(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kCopyImageToConstMeta,
      argValues: [srcPath, toDir],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCopyImageToConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "copy_image_to",
        argNames: ["srcPath", "toDir"],
      );

  Future<void> resetFailedDownloads({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_reset_failed_downloads(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kResetFailedDownloadsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kResetFailedDownloadsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reset_failed_downloads",
        argNames: [],
      );

  Future<void> deleteDlPost({required String dlKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(dlKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_delete_dl_post(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kDeleteDlPostConstMeta,
      argValues: [dlKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeleteDlPostConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_dl_post",
        argNames: ["dlKey"],
      );

  Future<String> downloadsTo({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_downloads_to(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kDownloadsToConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDownloadsToConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "downloads_to",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_box_autoadd_i64(dynamic raw) {
    return _wire2api_i64(raw);
  }

  DlPost _wire2api_dl_post(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 39)
      throw Exception('unexpected arr length: expect 39 but see ${arr.length}');
    return DlPost(
      host: _wire2api_String(arr[0]),
      id: _wire2api_i64(arr[1]),
      tags: _wire2api_String(arr[2]),
      createdAt: _wire2api_i64(arr[3]),
      creatorId: _wire2api_opt_box_autoadd_i64(arr[4]),
      author: _wire2api_String(arr[5]),
      change: _wire2api_i64(arr[6]),
      source: _wire2api_String(arr[7]),
      score: _wire2api_i64(arr[8]),
      md5: _wire2api_String(arr[9]),
      fileSize: _wire2api_i64(arr[10]),
      fileUrl: _wire2api_String(arr[11]),
      isShownInIndex: _wire2api_bool(arr[12]),
      previewUrl: _wire2api_String(arr[13]),
      previewWidth: _wire2api_i64(arr[14]),
      previewHeight: _wire2api_i64(arr[15]),
      actualPreviewWidth: _wire2api_i64(arr[16]),
      actualPreviewHeight: _wire2api_i64(arr[17]),
      sampleUrl: _wire2api_String(arr[18]),
      sampleWidth: _wire2api_i64(arr[19]),
      sampleHeight: _wire2api_i64(arr[20]),
      sampleFileSize: _wire2api_i64(arr[21]),
      jpegUrl: _wire2api_String(arr[22]),
      jpegWidth: _wire2api_i64(arr[23]),
      jpegHeight: _wire2api_i64(arr[24]),
      jpegFileSize: _wire2api_i64(arr[25]),
      rating: _wire2api_String(arr[26]),
      hasChildren: _wire2api_bool(arr[27]),
      parentId: _wire2api_opt_box_autoadd_i64(arr[28]),
      width: _wire2api_i64(arr[29]),
      height: _wire2api_i64(arr[30]),
      status: _wire2api_String(arr[31]),
      isHeld: _wire2api_bool(arr[32]),
      framesPendingString: _wire2api_String(arr[33]),
      framesString: _wire2api_String(arr[34]),
      dlKey: _wire2api_String(arr[35]),
      dlCreatedTime: _wire2api_i64(arr[36]),
      dlStatus: _wire2api_i32(arr[37]),
      fileFormat: _wire2api_String(arr[38]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<DlPost> _wire2api_list_dl_post(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_dl_post).toList();
  }

  List<Post> _wire2api_list_post(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_post).toList();
  }

  List<Tag> _wire2api_list_tag(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_tag).toList();
  }

  LocalImage _wire2api_local_image(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return LocalImage(
      absPath: _wire2api_String(arr[0]),
      localPath: _wire2api_String(arr[1]),
      imageFormat: _wire2api_String(arr[2]),
      imageWidth: _wire2api_u32(arr[3]),
      imageHeight: _wire2api_u32(arr[4]),
    );
  }

  int? _wire2api_opt_box_autoadd_i64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_i64(raw);
  }

  Post _wire2api_post(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 34)
      throw Exception('unexpected arr length: expect 34 but see ${arr.length}');
    return Post(
      id: _wire2api_i64(arr[0]),
      tags: _wire2api_String(arr[1]),
      createdAt: _wire2api_i64(arr[2]),
      creatorId: _wire2api_opt_box_autoadd_i64(arr[3]),
      author: _wire2api_String(arr[4]),
      change: _wire2api_i64(arr[5]),
      source: _wire2api_String(arr[6]),
      score: _wire2api_i64(arr[7]),
      md5: _wire2api_String(arr[8]),
      fileSize: _wire2api_i64(arr[9]),
      fileUrl: _wire2api_String(arr[10]),
      isShownInIndex: _wire2api_bool(arr[11]),
      previewUrl: _wire2api_String(arr[12]),
      previewWidth: _wire2api_i64(arr[13]),
      previewHeight: _wire2api_i64(arr[14]),
      actualPreviewWidth: _wire2api_i64(arr[15]),
      actualPreviewHeight: _wire2api_i64(arr[16]),
      sampleUrl: _wire2api_String(arr[17]),
      sampleWidth: _wire2api_i64(arr[18]),
      sampleHeight: _wire2api_i64(arr[19]),
      sampleFileSize: _wire2api_i64(arr[20]),
      jpegUrl: _wire2api_String(arr[21]),
      jpegWidth: _wire2api_i64(arr[22]),
      jpegHeight: _wire2api_i64(arr[23]),
      jpegFileSize: _wire2api_i64(arr[24]),
      rating: _wire2api_String(arr[25]),
      hasChildren: _wire2api_bool(arr[26]),
      parentId: _wire2api_opt_box_autoadd_i64(arr[27]),
      status: _wire2api_String(arr[28]),
      width: _wire2api_i64(arr[29]),
      height: _wire2api_i64(arr[30]),
      isHeld: _wire2api_bool(arr[31]),
      framesPendingString: _wire2api_String(arr[32]),
      framesString: _wire2api_String(arr[33]),
    );
  }

  PostPage _wire2api_post_page(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PostPage(
      posts: _wire2api_list_post(arr[0]),
      pageTotal: _wire2api_i64(arr[1]),
    );
  }

  Tag _wire2api_tag(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Tag(
      imageTotal: _wire2api_i64(arr[0]),
      tagNames: _wire2api_StringList(arr[1]),
    );
  }

  TagData _wire2api_tag_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TagData(
      version: _wire2api_i64(arr[0]),
      tags: _wire2api_list_tag(arr[1]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_autoadd_i32(int raw) {
    return inner.new_box_autoadd_i32_0(api2wire_i32(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(api2wire_i64(raw));
  }

  @protected
  ffi.Pointer<wire_Post> api2wire_box_autoadd_post(Post raw) {
    final ptr = inner.new_box_autoadd_post_0();
    _api_fill_to_wire_post(raw, ptr.ref);
    return ptr;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_opt_box_autoadd_i32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i32(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i64(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_post(
      Post apiObj, ffi.Pointer<wire_Post> wireObj) {
    _api_fill_to_wire_post(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_post(Post apiObj, wire_Post wireObj) {
    wireObj.id = api2wire_i64(apiObj.id);
    wireObj.tags = api2wire_String(apiObj.tags);
    wireObj.created_at = api2wire_i64(apiObj.createdAt);
    wireObj.creator_id = api2wire_opt_box_autoadd_i64(apiObj.creatorId);
    wireObj.author = api2wire_String(apiObj.author);
    wireObj.change = api2wire_i64(apiObj.change);
    wireObj.source = api2wire_String(apiObj.source);
    wireObj.score = api2wire_i64(apiObj.score);
    wireObj.md5 = api2wire_String(apiObj.md5);
    wireObj.file_size = api2wire_i64(apiObj.fileSize);
    wireObj.file_url = api2wire_String(apiObj.fileUrl);
    wireObj.is_shown_in_index = api2wire_bool(apiObj.isShownInIndex);
    wireObj.preview_url = api2wire_String(apiObj.previewUrl);
    wireObj.preview_width = api2wire_i64(apiObj.previewWidth);
    wireObj.preview_height = api2wire_i64(apiObj.previewHeight);
    wireObj.actual_preview_width = api2wire_i64(apiObj.actualPreviewWidth);
    wireObj.actual_preview_height = api2wire_i64(apiObj.actualPreviewHeight);
    wireObj.sample_url = api2wire_String(apiObj.sampleUrl);
    wireObj.sample_width = api2wire_i64(apiObj.sampleWidth);
    wireObj.sample_height = api2wire_i64(apiObj.sampleHeight);
    wireObj.sample_file_size = api2wire_i64(apiObj.sampleFileSize);
    wireObj.jpeg_url = api2wire_String(apiObj.jpegUrl);
    wireObj.jpeg_width = api2wire_i64(apiObj.jpegWidth);
    wireObj.jpeg_height = api2wire_i64(apiObj.jpegHeight);
    wireObj.jpeg_file_size = api2wire_i64(apiObj.jpegFileSize);
    wireObj.rating = api2wire_String(apiObj.rating);
    wireObj.has_children = api2wire_bool(apiObj.hasChildren);
    wireObj.parent_id = api2wire_opt_box_autoadd_i64(apiObj.parentId);
    wireObj.status = api2wire_String(apiObj.status);
    wireObj.width = api2wire_i64(apiObj.width);
    wireObj.height = api2wire_i64(apiObj.height);
    wireObj.is_held = api2wire_bool(apiObj.isHeld);
    wireObj.frames_pending_string = api2wire_String(apiObj.framesPendingString);
    wireObj.frames_string = api2wire_String(apiObj.framesString);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init(
    int port_,
    ffi.Pointer<wire_uint_8_list> root,
    ffi.Pointer<wire_uint_8_list> downloads_to,
  ) {
    return _wire_init(
      port_,
      root,
      downloads_to,
    );
  }

  late final _wire_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_init');
  late final _wire_init = _wire_initPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_proxy(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_set_proxy(
      port_,
      url,
    );
  }

  late final _wire_set_proxyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_set_proxy');
  late final _wire_set_proxy = _wire_set_proxyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_desktop_root(
    int port_,
  ) {
    return _wire_desktop_root(
      port_,
    );
  }

  late final _wire_desktop_rootPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_desktop_root');
  late final _wire_desktop_root =
      _wire_desktop_rootPtr.asFunction<void Function(int)>();

  void wire_http_get(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_http_get(
      port_,
      url,
    );
  }

  late final _wire_http_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_http_get');
  late final _wire_http_get = _wire_http_getPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_save_property(
    int port_,
    ffi.Pointer<wire_uint_8_list> k,
    ffi.Pointer<wire_uint_8_list> v,
  ) {
    return _wire_save_property(
      port_,
      k,
      v,
    );
  }

  late final _wire_save_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_save_property');
  late final _wire_save_property = _wire_save_propertyPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_load_property(
    int port_,
    ffi.Pointer<wire_uint_8_list> k,
  ) {
    return _wire_load_property(
      port_,
      k,
    );
  }

  late final _wire_load_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_load_property');
  late final _wire_load_property = _wire_load_propertyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_tag_summary(
    int port_,
    ffi.Pointer<wire_uint_8_list> host,
  ) {
    return _wire_tag_summary(
      port_,
      host,
    );
  }

  late final _wire_tag_summaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_tag_summary');
  late final _wire_tag_summary = _wire_tag_summaryPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_load_posts(
    int port_,
    ffi.Pointer<wire_uint_8_list> host,
    ffi.Pointer<wire_uint_8_list> tags,
    int page,
  ) {
    return _wire_load_posts(
      port_,
      host,
      tags,
      page,
    );
  }

  late final _wire_load_postsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Int64)>>('wire_load_posts');
  late final _wire_load_posts = _wire_load_postsPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_load_cache_image(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
    ffi.Pointer<wire_uint_8_list> useful,
    ffi.Pointer<ffi.Int32> extends_field_int_first,
    ffi.Pointer<ffi.Int32> extends_field_int_second,
    ffi.Pointer<ffi.Int32> extends_field_int_third,
  ) {
    return _wire_load_cache_image(
      port_,
      url,
      useful,
      extends_field_int_first,
      extends_field_int_second,
      extends_field_int_third,
    );
  }

  late final _wire_load_cache_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('wire_load_cache_image');
  late final _wire_load_cache_image = _wire_load_cache_imagePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  void wire_auto_clean(
    int port_,
    int time,
  ) {
    return _wire_auto_clean(
      port_,
      time,
    );
  }

  late final _wire_auto_cleanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int64)>>(
          'wire_auto_clean');
  late final _wire_auto_clean =
      _wire_auto_cleanPtr.asFunction<void Function(int, int)>();

  void wire_clean_all_cache(
    int port_,
  ) {
    return _wire_clean_all_cache(
      port_,
    );
  }

  late final _wire_clean_all_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_clean_all_cache');
  late final _wire_clean_all_cache =
      _wire_clean_all_cachePtr.asFunction<void Function(int)>();

  void wire_add_download_post(
    int port_,
    ffi.Pointer<wire_uint_8_list> host,
    ffi.Pointer<wire_Post> post,
  ) {
    return _wire_add_download_post(
      port_,
      host,
      post,
    );
  }

  late final _wire_add_download_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Post>)>>('wire_add_download_post');
  late final _wire_add_download_post = _wire_add_download_postPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Post>)>();

  void wire_all_downloads(
    int port_,
  ) {
    return _wire_all_downloads(
      port_,
    );
  }

  late final _wire_all_downloadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_all_downloads');
  late final _wire_all_downloads =
      _wire_all_downloadsPtr.asFunction<void Function(int)>();

  void wire_load_dl_image(
    int port_,
    ffi.Pointer<wire_uint_8_list> dl_key,
  ) {
    return _wire_load_dl_image(
      port_,
      dl_key,
    );
  }

  late final _wire_load_dl_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_load_dl_image');
  late final _wire_load_dl_image = _wire_load_dl_imagePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_copy_image_to(
    int port_,
    ffi.Pointer<wire_uint_8_list> src_path,
    ffi.Pointer<wire_uint_8_list> to_dir,
  ) {
    return _wire_copy_image_to(
      port_,
      src_path,
      to_dir,
    );
  }

  late final _wire_copy_image_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_copy_image_to');
  late final _wire_copy_image_to = _wire_copy_image_toPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_reset_failed_downloads(
    int port_,
  ) {
    return _wire_reset_failed_downloads(
      port_,
    );
  }

  late final _wire_reset_failed_downloadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_reset_failed_downloads');
  late final _wire_reset_failed_downloads =
      _wire_reset_failed_downloadsPtr.asFunction<void Function(int)>();

  void wire_delete_dl_post(
    int port_,
    ffi.Pointer<wire_uint_8_list> dl_key,
  ) {
    return _wire_delete_dl_post(
      port_,
      dl_key,
    );
  }

  late final _wire_delete_dl_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_delete_dl_post');
  late final _wire_delete_dl_post = _wire_delete_dl_postPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_downloads_to(
    int port_,
  ) {
    return _wire_downloads_to(
      port_,
    );
  }

  late final _wire_downloads_toPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_downloads_to');
  late final _wire_downloads_to =
      _wire_downloads_toPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Int32> new_box_autoadd_i32_0(
    int value,
  ) {
    return _new_box_autoadd_i32_0(
      value,
    );
  }

  late final _new_box_autoadd_i32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'new_box_autoadd_i32_0');
  late final _new_box_autoadd_i32_0 = _new_box_autoadd_i32_0Ptr
      .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64_0(
    int value,
  ) {
    return _new_box_autoadd_i64_0(
      value,
    );
  }

  late final _new_box_autoadd_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'new_box_autoadd_i64_0');
  late final _new_box_autoadd_i64_0 = _new_box_autoadd_i64_0Ptr
      .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_Post> new_box_autoadd_post_0() {
    return _new_box_autoadd_post_0();
  }

  late final _new_box_autoadd_post_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Post> Function()>>(
          'new_box_autoadd_post_0');
  late final _new_box_autoadd_post_0 = _new_box_autoadd_post_0Ptr
      .asFunction<ffi.Pointer<wire_Post> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Post extends ffi.Struct {
  @ffi.Int64()
  external int id;

  external ffi.Pointer<wire_uint_8_list> tags;

  @ffi.Int64()
  external int created_at;

  external ffi.Pointer<ffi.Int64> creator_id;

  external ffi.Pointer<wire_uint_8_list> author;

  @ffi.Int64()
  external int change;

  external ffi.Pointer<wire_uint_8_list> source;

  @ffi.Int64()
  external int score;

  external ffi.Pointer<wire_uint_8_list> md5;

  @ffi.Int64()
  external int file_size;

  external ffi.Pointer<wire_uint_8_list> file_url;

  @ffi.Bool()
  external bool is_shown_in_index;

  external ffi.Pointer<wire_uint_8_list> preview_url;

  @ffi.Int64()
  external int preview_width;

  @ffi.Int64()
  external int preview_height;

  @ffi.Int64()
  external int actual_preview_width;

  @ffi.Int64()
  external int actual_preview_height;

  external ffi.Pointer<wire_uint_8_list> sample_url;

  @ffi.Int64()
  external int sample_width;

  @ffi.Int64()
  external int sample_height;

  @ffi.Int64()
  external int sample_file_size;

  external ffi.Pointer<wire_uint_8_list> jpeg_url;

  @ffi.Int64()
  external int jpeg_width;

  @ffi.Int64()
  external int jpeg_height;

  @ffi.Int64()
  external int jpeg_file_size;

  external ffi.Pointer<wire_uint_8_list> rating;

  @ffi.Bool()
  external bool has_children;

  external ffi.Pointer<ffi.Int64> parent_id;

  external ffi.Pointer<wire_uint_8_list> status;

  @ffi.Int64()
  external int width;

  @ffi.Int64()
  external int height;

  @ffi.Bool()
  external bool is_held;

  external ffi.Pointer<wire_uint_8_list> frames_pending_string;

  external ffi.Pointer<wire_uint_8_list> frames_string;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
